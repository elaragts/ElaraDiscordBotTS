/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type {ColumnType} from 'kysely';

export type ArrayType<T> = ArrayTypeImpl<T> extends (infer U)[]
    ? U[]
    : ArrayTypeImpl<T>;

export type ArrayTypeImpl<T> = T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S[], I[], U[]>
    : T[];

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<number, number, number>;

export type Numeric = ColumnType<number, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface _EFMigrationsHistory {
    migration_id: string;
    product_version: string;
}

export interface AiScoreData {
    baid: Int8;
    difficulty: Int8;
    is_win: boolean;
    song_id: Int8;
}

export interface AiSectionScoreData {
    baid: Int8;
    crown: number;
    difficulty: Int8;
    drumroll_count: Int8;
    good_count: Int8;
    is_win: boolean;
    miss_count: Int8;
    ok_count: Int8;
    score: Int8;
    section_index: number;
    song_id: Int8;
}

export interface Battle {
    id: Generated<Int8>;
    player_one_baid: Int8;
    player_two_baid: Int8;
    song_number: Int8;
    winner_baid: Int8;
    battle_at: Timestamp;
}

export interface Card {
    access_code: string;
    baid: Int8;
}

export interface Chassis {
    active: boolean;
    chassis_id: Numeric;
    discord_id: string;
}

export interface Credential {
    baid: Int8;
    password: string;
    salt: string;
}

export interface DanScoreData {
    arrival_song_count: Int8;
    baid: Int8;
    clear_state: Generated<Int8>;
    combo_count_total: Int8;
    dan_id: Int8;
    dan_type: Generated<number>;
    soul_gauge_total: Int8;
}

export interface DanStageScoreData {
    bad_count: Int8;
    baid: Int8;
    combo_count: Int8;
    dan_id: Int8;
    dan_type: Generated<number>;
    drumroll_count: Int8;
    good_count: Int8;
    high_score: Int8;
    ok_count: Int8;
    play_score: Int8;
    song_number: Int8;
    total_hit_count: Int8;
}

export interface SongBestData {
    baid: Int8;
    best_crown: number;
    best_rate: Int8;
    best_score: Int8;
    best_score_rank: number;
    difficulty: number;
    song_id: Int8;
}

export interface SongPlayData {
    baid: Int8;
    combo_count: Int8;
    crown: number;
    difficulty: number;
    drumroll_count: Int8;
    good_count: Int8;
    hit_count: Int8;
    id: Generated<Int8>;
    miss_count: Int8;
    ok_count: Int8;
    play_time: Timestamp;
    score: Int8;
    score_rank: number;
    score_rate: Int8;
    skipped: boolean;
    song_id: Int8;
    song_number: Int8;
}

export interface Token {
    baid: Int8;
    count: number;
    id: number;
}

export interface UserChassis {
    baid: Int8;
    chassis_id: Numeric;
    id: Generated<number>;
    last_used: Timestamp;
}

export interface UserData {
    achievement_display_difficulty: number;
    ai_win_count: number;
    baid: Generated<Int8>;
    color_body: Int8;
    color_face: Int8;
    color_limb: Int8;
    current_body: Int8;
    current_face: Int8;
    current_head: Int8;
    current_kigurumi: Int8;
    current_puchi: Int8;
    difficulty_played_course: Int8;
    difficulty_played_sort: Int8;
    difficulty_played_star: Int8;
    difficulty_setting_course: Int8;
    difficulty_setting_sort: Int8;
    difficulty_setting_star: Int8;
    display_achievement: boolean;
    display_dan: boolean;
    favorite_songs_array: ArrayType<Int8>;
    generic_info_flg_array: ArrayType<Int8>;
    is_admin: boolean;
    is_skip_on: boolean;
    is_voice_on: boolean;
    last_play_datetime: Timestamp;
    last_play_mode: Int8;
    my_don_name: string;
    my_don_name_language: Int8;
    notes_position: number;
    option_setting: number;
    selected_tone_id: Int8;
    title: string;
    title_flg_array: ArrayType<Int8>;
    title_plate_id: Int8;
    tone_flg_array: ArrayType<Int8>;
    unlocked_body: ArrayType<Int8>;
    unlocked_face: ArrayType<Int8>;
    unlocked_head: ArrayType<Int8>;
    unlocked_kigurumi: ArrayType<Int8>;
    unlocked_puchi: ArrayType<Int8>;
    unlocked_song_id_list: ArrayType<Int8>;
    unlocked_ura_song_id_list: ArrayType<Int8>;
}

export interface UserDiscord {
    baid: Int8;
    discord_id: string;
}

export interface UserRatingSummaries {
    baid: Int8;
    min_top50_rate: Generated<Numeric>;
    top50_sum_rate: Generated<Numeric>;
}

export interface UserSongRates {
    baid: Int8;
    external_difficulty: Numeric;
    song_id: number;
    song_rate: Numeric;
}

export interface UserTop50 {
    baid: Int8;
    external_difficulty: Numeric;
    song_id: number;
    song_rate: Numeric;
    accuracy: Numeric;
}

export interface DB {
    __EFMigrationsHistory: _EFMigrationsHistory;
    ai_score_data: AiScoreData;
    ai_section_score_data: AiSectionScoreData;
    battle: Battle;
    card: Card;
    chassis: Chassis;
    credential: Credential;
    dan_score_data: DanScoreData;
    dan_stage_score_data: DanStageScoreData;
    song_best_data: SongBestData;
    song_play_data: SongPlayData;
    token: Token;
    user_chassis: UserChassis;
    user_data: UserData;
    user_discord: UserDiscord;
    user_rating_summaries: UserRatingSummaries;
    user_song_rates: UserSongRates;
    user_top50: UserTop50;
}
